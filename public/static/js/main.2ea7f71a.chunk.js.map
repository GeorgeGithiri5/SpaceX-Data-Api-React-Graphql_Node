{"version":3,"sources":["components/LaunchItem.js","components/MissionKey.js","components/Launch.js","components/Details.js","App.js","serviceWorker.js","index.js"],"names":["LaunchItem","_ref","_ref$launch","launch","flight_number","mission_name","launch_date_local","launch_success","react_default","a","createElement","className","text-success","text-danger","dist_default","format","react_router_dom","to","concat","MissionKey","LAUNCHES_QUERY","gql","_templateObject","Launch","react_components_esm","query","loading","error","data","console","log","Fragment","launches","map","key","Component","LAUNCH_QUERY","Details_templateObject","Details","this","props","match","params","parseInt","variables","_data$launch","launch_year","_data$launch$rocket","rocket","rocket_id","rocket_name","rocket_type","classNames","client","ApolloClient","uri","App","react_common_esm","react_router","exact","path","component","React","Boolean","window","location","hostname","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2ea7f71a.chunk.js","sourcesContent":["import React from 'react'\r\nimport className from 'classnames'\r\nimport Moment from 'react-moment'\r\nimport {Link} from 'react-router-dom'\r\n\r\nexport default function LaunchItem({launch: {flight_number, mission_name, launch_date_local, launch_success}}){\r\n    return(\r\n        <div className=\"card card-body mb-3\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-9\">\r\n                    <h4>Mission: <span\r\n                        className={className({\r\n                            'text-success':launch_success,\r\n                            'text-danger': !launch_success\r\n                        })}>{mission_name}\r\n                    </span></h4>\r\n                    <p>Date: \r\n                        <Moment format = \"YYYY-MM-DD HH:mm\">\r\n                            {launch_date_local}\r\n                        </Moment>\r\n                        </p>\r\n                </div>\r\n                <div className=\"col-md-3\">\r\n                    <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">Details</Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport default function MissionKey(){\r\n    return(\r\n        <div className=\"my-3\">\r\n            <p>\r\n                <span className=\"px-3 mr-2 bg-success\"/> = Success\r\n            </p>\r\n            <p>\r\n                <span className=\"px-3 mr-2 bg-danger\"/> = Fail\r\n            </p>\r\n        </div>\r\n    )\r\n}","import React, { Component } from 'react';\r\nimport gql from 'graphql-tag'\r\nimport {Query} from 'react-apollo'\r\nimport LaunchItem from './LaunchItem';\r\nimport MissionKey from './MissionKey'\r\n\r\nconst LAUNCHES_QUERY = gql`\r\n    query LaunchesQuery{\r\n        launches{\r\n            flight_number\r\n            mission_name\r\n            launch_date_local\r\n            launch_success\r\n        }\r\n    }\r\n`\r\n\r\nclass Launch extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h4 className=\"text-muted text-center display-4 my-3\">Launches</h4>\r\n                <MissionKey/>\r\n                <Query query={LAUNCHES_QUERY}>\r\n                    {\r\n                       ({loading, error, data}) =>{\r\n                           if(loading) return <h4 className=\"text-success\">Loading</h4>\r\n                           if(error) console.log(error)\r\n                        \r\n                           return <>\r\n                            {\r\n                                data.launches.map(launch=>{\r\n                                    return <LaunchItem key={launch.flight_number} launch = {launch} />\r\n                                })\r\n                            }\r\n                           </>\r\n                           \r\n                       } \r\n                    }\r\n                </Query>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Launch;","import React, {Component} from 'react'\r\nimport gql from 'graphql-tag'\r\nimport {Query} from 'react-apollo'\r\nimport {Link} from 'react-router-dom'\r\nimport classNames from 'classnames'\r\n\r\nconst LAUNCH_QUERY = gql`\r\n    query LaunchQuery($flight_number: Int!){\r\n        launch(flight_number: $flight_number){\r\n            flight_number\r\n            mission_name\r\n            launch_year\r\n            launch_success\r\n            launch_date_local\r\n            rocket {\r\n                rocket_id\r\n                rocket_name\r\n                rocket_type\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport default class Details extends Component{\r\n    render(){\r\n        let {flight_number} = this.props.match.params\r\n        flight_number = parseInt(flight_number);\r\n        return(\r\n            <>\r\n                <Query query={LAUNCH_QUERY} variables={{flight_number}}>\r\n                    {\r\n                        ({loading, error, data})=>{\r\n                            if(loading) return <h4>Loading...</h4>\r\n                            if(error) console.log(error)\r\n                            \r\n                            const {mission_name, flight_number, launch_year, launch_success, rocket: {rocket_id, rocket_name, rocket_type}} = data.launch \r\n\r\n                            return <div>\r\n                                <h5 className=\"display-4 my-3 text-muted\">\r\n                                    <span className=\"text-dark\">Mission:</span>\r\n                                    {mission_name}\r\n                                </h5>\r\n                                <h6 className=\"mb-3\">Launch Details</h6>\r\n                                <ul className=\"list-group\">\r\n                                    <li className=\"list-group-item\">\r\n                                        Flight Number: {flight_number}\r\n                                    </li>\r\n                                    <li className=\"list-group-item\">\r\n                                        Launch Year: {launch_year}\r\n                                    </li>\r\n                                    <li className=\"list-group-item\">\r\n                                        launch Successful: <span className={classNames({\r\n                                            'text-success':launch_success,\r\n                                            'text-danger':!launch_success\r\n                                        })}>{launch_success ? 'Yes':'No'}</span>\r\n                                    </li>\r\n                                    <li className=\"list-group-item\">\r\n                                        Flight Number: {flight_number}\r\n                                    </li>\r\n                                </ul>\r\n\r\n                                <h4 className=\"my-3\">\r\n                                    Rocket details\r\n                                    </h4>\r\n                                <ul className=\"list-group\">\r\n                                    <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\r\n                                    <li className=\"list-group-item\">Rocket Name: {rocket_name}</li>\r\n                                    <li className=\"list-group-item\">Rocket Type: {rocket_type}</li>\r\n                                </ul>\r\n                                <hr/>\r\n                                <Link to=\"/\" className=\"btn btn-secondary\">Back</Link>\r\n                            </div>\r\n                        }\r\n                    }\r\n                </Query>\r\n            </>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport axios from 'axios'\r\nimport ApolloClient from 'apollo-boost'\r\nimport {ApolloProvider} from 'react-apollo'\r\nimport Launch from './components/Launch'\r\nimport Details from './components/Details'\r\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\r\n\r\nconst client = new ApolloClient({\r\n  uri: '/graphql'\r\n})\r\n\r\nexport default class App extends React.Component{\r\n  render(){\r\n    return(\r\n      <ApolloProvider client={client}>\r\n        <Router>\r\n          <div className=\"container\">\r\n            <Route exact path=\"/\" component ={Launch}/>\r\n            <Route exact path =\"/launch/:flight_number\" component={Details}/>\r\n          </div>\r\n        </Router>\r\n      </ApolloProvider>\r\n    )\r\n  }\r\n  \r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport './index.css';\nimport App from './App';\nimport 'react-mdl/extra/material.css';\nimport 'react-mdl/extra/material.js';\nimport 'animate.css/animate.min.css';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n                <App />\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}